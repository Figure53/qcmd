#!/usr/bin/env ruby

#
# After starting qcmd-proxy, you should be able to to connect to "OSC QLab
# Proxy Server" from QLab Remote for iPad and see all the messages flying back
# and forth in your terminal.
#

require 'qcmd'
require 'dnssd'
require 'trollop'

VERSION_STRING =  "qcmd-proxy #{ Qcmd::VERSION } (c) 2013 Figure 53, Baltimore, MD."

opts = Trollop::options do
  version VERSION_STRING
  opt :receiving_port, 'The port qcmd-proxy will receive requests from client apps on.', :default => 52000
  opt :qlab_listening_port, 'The port QLab is listening on.', :default => 53000
  opt :qlab_response_port, 'The port QLab will respond on.', :default => 53001
  opt :qlab_host_name, 'The hostname of the running QLab instance.', :default => 'localhost'
end

receiving_port = opts[:receiving_port]

# 52001 for testing on localhost, 53001 for real-world use.
udp_response_port = 53001

# These are QLab's built in ports and cannot be changed.
qlab_listening_port = opts[:qlab_listening_port]
qlab_response_port  = opts[:qlab_response_port]
qlab_host_name      = opts[:qlab_host_name]

dnssd_thread = Thread.new do
  # name, type, domain, port
  service = DNSSD.register 'OSC QLab Proxy Server', '_qlab._udp', 'local.', receiving_port
  service = DNSSD.register 'OSC QLab Proxy Server', '_qlab._tcp', 'local.', receiving_port
end

# TCP & UDP servers that talk directly to QLab
begin
  outbound_qlab_tcp_connection = OSC::TCP::Client.new qlab_host_name, qlab_listening_port
rescue Errno::ECONNREFUSED
  Qcmd.print_wrapped "Could not connect to QLab. Make sure you have QLab running on this machine before starting qcmd-proxy."
  exit 1
end
outbound_qlab_udp_connection = OSC::Client.new qlab_host_name, qlab_listening_port

# Forwarding UDP Server
#
# This server gets requests from a remote control app and forwards them to QLab
begin
  forwarding_udp_server = OSC::Server.new(receiving_port)
rescue Errno::EADDRINUSE
  Qcmd.print_wrapped "Port #{ receiving_port } already seems to be in use, please choose a different recieving port."
end

# we won't know which IP Adress is making the UDP request until a request has been received.
requesting_ip_address = nil
requesting_clients = {}

forwarding_udp_server.add_method(/.*/) do |message|
  Qcmd.print "[udp from client] #{ message.debug }"

  # get client app's ip address, we'll use it to forward traffic from QLab back
  # to the remote control app.
  requesting_ip_address = message.ip_address.sub(/\.\.\./, '')

  # immediately send message to QLab
  begin
    outbound_qlab_udp_connection.send message
  rescue Errno::ECONNREFUSED
    Qcmd.print "Connection to QLab lost!"
  end
end

# Receive real responses from QLab and forward them back to original requestor
# on port 53001, just like the real QLab. Slight problem, we don't know who
# sent the request that inspired this response, so we guess it's the requestor
# who made a request most recently.
inbound_qlab_udp_connection = OSC::Server.new qlab_response_port
inbound_qlab_udp_connection.add_method(/.*/) do |qlab_response_message|
  if requesting_ip_address
    Qcmd.print "[udp from QLab for #{ requesting_ip_address }:#{ udp_response_port }]  #{ qlab_response_message.debug }"
    # Qcmd.print "[udp from QLab] on client #{ requesting_clients[requesting_ip_address].inspect }"

    requesting_clients[requesting_ip_address] = OSC::Client.new(requesting_ip_address, udp_response_port)
    requesting_clients[requesting_ip_address].send(qlab_response_message)
  else
    Qcmd.print "Cannot forward UDP from QLab! No requesting_ip_address available"
  end
end

## OSC::TCPServer gets requests and forwards them to QLab
forwarding_tcp_server = OSC::TCP::Server.new(receiving_port)
forwarding_tcp_server.add_method(/.*/) do |message|
  Qcmd.print "[tcp from client] #{ message.debug }"

  outbound_qlab_udp_connection.send(message) do |qlab_response_message|
    if qlab_response_message
      Qcmd.print "[tcp from QLab] #{ qlab_response_message.debug }"
      message.responder.send(qlab_response_message)
    else
      Qcmd.print "[tcp from QLab] nil"
    end
  end
end

Qcmd.print "starting forwarding UDP server on port #{ receiving_port }"
udp_forwarding_thread = Thread.new do
  forwarding_udp_server.run
end

Qcmd.print "starting inbound UDP server on port #{ qlab_response_port }"
udp_inbound_thread = Thread.new do
  inbound_qlab_udp_connection.run
end

Qcmd.print "starting forwarding TCP server on port #{ receiving_port }"
forwarding_tcp_server.run


